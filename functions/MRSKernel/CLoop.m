function [Br Bz] = CLoop(loopr, r, z, f, sm, zm, res)

m0   = 4*pi*1.0e-7;

Br = zeros(1,length(r));
Bz = zeros(1,length(r));
for m = 1:length(r)
    Hr = 0;
    Hz = 0;
    if ~res
        nu   = 64;
        rx   = max(r(m),loopr);
        du   = nu / (4*pi*rx);
        umax = min(10/z,100);
        %umax = 10/z;
        nsec = max(1.0, umax/du);
        for n = 1:nsec
            ua        = (n-1)*du;
            ub        = (n)*du;
            [k, w]    = legau(ua, ub);
            [Fhr,Fhz] = PhiTE(sm, zm, z, f , k);
            J1a       = besselj(1,k*loopr);
            J1r       = besselj(1,k*r(m));
            J0r       = besselj(0,k*r(m));
            Hr        = Hr + loopr*Fhr*(w.*J1a.*J1r)';
            Hz        = Hz + loopr*Fhz*(w.*J1a.*J0r)';
        end
    end
    
    [Hr_dc Hz_dc] = Hdc_local(r(m), z, loopr);
    
    Br(m) = (Hr + Hr_dc) * m0;
    Bz(m) = (Hz + Hz_dc) * m0;
end
end

function [Hr_dc, Hz_dc] = Hdc_local(r, z, a)

m  = (4*a*r/((a+r).^2+z^2));
t1 = 1./(2*pi*(sqrt((r+a)^2 + z^2)));
t2 = ((a-r)^2 + z^2);

[K,E] = ellipke(m);
Hr_dc = t1 * z / r * ((r^2 + a^2 + z^2)/t2 * E - K);
Hz_dc = t1 * ((a^2 - r^2 -  z^2)/t2 * E + K);
end


function [Fr, Fz] =	PhiTE(sm, zm, z, f, k)

m0 =		4*pi*1.0e-7;
w  =		2*pi*f;
ns = length(sm);

% intrinsic layer imedance of the underlying halfspace
alpha(ns,:) = sqrt(1i*w*m0*sm(end)+k.^2);
Bm(ns,:)    = alpha(ns,:);

% strata impedances by Wait's recurrence relation
for	n	    = ns-1:-1:1
    alpha(n,:) = sqrt(1i*w*m0*sm(n)+k.^2);
%     Bm(n,:)    = alpha(n,:) .* (Bm(n+1,:)+alpha(n,:).*tanh(alpha(n)*(zm(n+1)-zm(n))))./(alpha(n,:)+Bm(n+1,:).*tanh(alpha(n,:)*(zm(n+1)-zm(n))));
    Bm(n,:)    = alpha(n,:) .* (Bm(n+1,:)+alpha(n,:).*tanh(alpha(n,:)*(zm(n+1)-zm(n))))./(alpha(n,:)+Bm(n+1,:).*tanh(alpha(n,:)*(zm(n+1)-zm(n))));
end

% in which layer is the point to compute
z_in = find(z>zm, 1, 'last');

% TE-Potential at all boundaries down to the target layer
Fm(1,:) = k .^2 ./(k+Bm(1,:));
for	n =	1:z_in-1
    Fm(n+1,:) =	Fm(n,:) .* ((alpha(n,:)+Bm(n,:))./(alpha(n,:)+Bm(n+1,:))).* exp(-alpha(n,:)*(zm(n+1)-zm(n)));
end

% TE-Potential from the boundary to the target point
if z_in == length(sm)
    Fn = 1 / 2 * (k .* exp(-k * z));
    Fz =                       Fm(z_in,:) .* (exp(-alpha(z_in,:) .* (z - zm(z_in)))) - Fn;
    Fr = alpha(z_in,:) ./ k .* Fm(z_in,:) .* (exp(-alpha(z_in,:) .* (z - zm(z_in)))) - Fn;
else
    t1 = (Bm(z_in+1,:)-alpha(z_in,:)) ./ (Bm(z_in+1,:)+alpha(z_in,:));
    t2 = exp(-alpha(z_in,:) .* (2*(zm(z_in+1)) - zm(z_in)-z));
    t3 = exp(-alpha(z_in,:) .* (z - zm(z_in)));
    t4 = (1 + (Bm(z_in,:) ./ alpha(z_in,:)))./2.0;
    
    Fn = 1 / 2 * (k .* exp(-k * z));
    Fz =                       Fm(z_in,:) .* t4 .* (t3 - t1 .* t2) - Fn;
    Fr = alpha(z_in,:) ./ k .* Fm(z_in,:) .* t4 .* (t3 + t1 .* t2) - Fn;
end
end


function [k, w] = legau(a, b)

wt = [0.178328072169643294729607914497e-2 ...
    0.414703326056246763528753572855e-2 ...
    0.650445796897836285611736039998e-2 ...
    0.884675982636394772303091465973e-2 ...
    0.111681394601311288185904930192e-1 ...
    0.134630478967186425980607666859e-1 ...
    0.157260304760247193219659952975e-1 ...
    0.179517157756973430850453020011e-1 ...
    0.201348231535302093723403167285e-1 ...
    0.222701738083832541592983303841e-1 ...
    0.243527025687108733381775504090e-1 ...
    0.263774697150546586716917926252e-1 ...
    0.283396726142594832275113052002e-1 ...
    0.302346570724024788679740598195e-1 ...
    0.320579283548515535854675043478e-1 ...
    0.338051618371416093915654821107e-1 ...
    0.354722132568823838106931467152e-1 ...
    0.370551285402400460404151018095e-1 ...
    0.385501531786156291289624969468e-1 ...
    0.399537411327203413866569261283e-1 ...
    0.412625632426235286101562974736e-1 ...
    0.424735151236535890073397679088e-1 ...
    0.435837245293234533768278609737e-1 ...
    0.445905581637565630601347100309e-1 ...
    0.454916279274181444797709969712e-1 ...
    0.462847965813144172959532492322e-1 ...
    0.469681828162100173253262857545e-1 ...
    0.475401657148303086622822069442e-1 ...
    0.479993885964583077281261798713e-1 ...
    0.483447622348029571697695271580e-1 ...
    0.485754674415034269347990667839e-1 ...
    0.486909570091397203833653907347e-1];

ab = [0.999305041735772139456905624345e0 ...
    0.996340116771955279346924500676e0 ...
    0.991013371476744320739382383443e0 ...
    0.983336253884625956931299302156e0 ...
    0.973326827789910963741853507352e0 ...
    0.961008799652053718918614121897e0 ...
    0.946411374858402816062481491347e0 ...
    0.929569172131939575821490154559e0 ...
    0.910522137078502805756380668008e0 ...
    0.889315445995114105853404038272e0 ...
    0.865999398154092819760783385070e0 ...
    0.840629296252580362751691544695e0 ...
    0.813265315122797559741923338086e0 ...
    0.783972358943341407610220525213e0 ...
    0.752819907260531896611863774885e0 ...
    0.719881850171610826848940217831e0 ...
    0.685236313054233242563558371031e0 ...
    0.648965471254657339857761231993e0 ...
    0.611155355172393250248852971018e0 ...
    0.571895646202634034283878116659e0 ...
    0.531279464019894545658013903544e0 ...
    0.489403145707052957478526307021e0 ...
    0.446366017253464087984947714758e0 ...
    0.402270157963991603695766771260e0 ...
    0.357220158337668115950442615046e0 ...
    0.311322871990210956157512698560e0 ...
    0.264687162208767416373964172510e0 ...
    0.217423643740007084149648748988e0 ...
    0.169644420423992818037313629748e0 ...
    0.121462819296120554470376463492e0 ...
    0.729931217877990394495429419403e-1 ...
    0.243502926634244325089558428537e-1];


d = 0.5e0*(b-a);
s = 0.5e0*(b+a);

k    =   [(d*ab+s) fliplr(-d*ab+s)];
w    =   [(d*wt) fliplr(d*wt)];
end